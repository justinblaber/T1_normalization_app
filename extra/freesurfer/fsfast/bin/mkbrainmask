#!/bin/tcsh -f
# mkbrainmask

set VERSION = '$Id: mkbrainmask,v 1.17 2015/12/10 22:51:30 zkaufman Exp $';

set movmask = ();
set reg = ();
set mov = ();
set ndilates = 0;
set dilerodedim = ();
set nerodes = 0;
set zeroedges = 0;
set zerosliceedges = 0;
set UseAnatMask = 0;
set UseAPAS = 1;

set tmpdir = ();
set cleanup = 1;
set LF = ();

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

set outdir = `dirname $movmask`
mkdir -p $outdir

# Set up log file
if($#LF == 0) set LF = $movmask.mkbrainmask.log
if($LF != /dev/null) rm -f $LF
echo "Log file for mkbrainmask" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF

#========================================================
set cmd = (mri_vol2vol --mov $mov --reg $reg --inv --interp nearest --o $movmask)
if($UseAnatMask) set cmd = ($cmd --targ $anatmask)
if($UseAPAS) set cmd = ($cmd --targ $apas)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;

#------------------------------------------------------------------
set cmd = (mri_binarize --i $movmask --o $movmask --min 0.5)
if($zeroedges)      set cmd = ($cmd --zero-edges);
if($zerosliceedges) set cmd = ($cmd --zero-slice-edges);
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;

#------------------------------------------------------------------
if($ndilates > 0) then
  echo "Diliating $ndilates" | tee -a $LF
  set cmd = (mri_binarize --i $movmask --min 0.5 \
     --dilate $ndilates --o $movmask);
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;
endif

#------------------------------------------------------------------
if($nerodes > 0) then
  echo "Eroding $nerodes" | tee -a $LF
  set cmd = (mri_binarize --i $srcmask --min 0.5 \
     --erode $nerodes --o $srcmask);
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;
endif

#========================================================

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Mkbrainmask-Run-Time-Sec $tSecRun" |& tee -a $LF
echo " " |& tee -a $LF
echo "mkbrainmask Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR:"

exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-o":
    case "--o":
      if($#argv < 1) goto arg1err;
      set movmask = $argv[1]; shift;
      breaksw

    case "-reg":
    case "--reg":
      if($#argv < 1) goto arg1err;
      set reg = $argv[1]; shift;
      if(! -e $reg) then
        echo "ERROR: cannot find $reg"
        exit 1;
      endif
      breaksw

    case "-i":
    case "--mov":
      if($#argv < 1) goto arg1err;
      set mov = $argv[1]; shift;
      breaksw

    case "-ndil":
    case "--ndil":
      if($#argv < 1) goto arg1err;
      set ndilates = $argv[1]; shift;
      breaksw

    case "-nerode":
    case "--nerode":
      if($#argv < 1) goto arg1err;
      set nerode = $argv[1]; shift;
      breaksw

    case "-zero-edges":
      set zeroedges = 1; 
      breaksw

    case "-zero-slice-edges":
      set zerosliceedges = 1; 
      breaksw

    case "-apas":
      set UseAPAS = 1;
      set UseAnatMask = 0;
      set ndilates = 1;
      breaksw

    case "-anatmask":
    case "-anat-mask":
      set UseAnatMask = 1;
      set UseAPAS = 0;
      breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#reg == 0) then
  echo "ERROR: must spec reg"
  exit 1;
endif
if($#mov == 0) then
  echo "ERROR: must spec mov"
  exit 1;
endif
if($#movmask == 0) then
  echo "ERROR: must spec output mask"
  exit 1;
endif
set subject = `reg2subject --r $reg`
if(! -e $SUBJECTS_DIR/$subject) then
  echo "ERROR: cannot find $subject"
  exit 1;
endif
set anatmask = $SUBJECTS_DIR/$subject/mri/brainmask.mgz
if(! -e $anatmask) then
  echo "ERROR: cannot find $anatmask"
  exit 1;
endif
set apas = $SUBJECTS_DIR/$subject/mri/aparc+aseg.mgz
if(! -e $apas) then
  echo "ERROR: cannot find $apas"
  exit 1;
endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo "mkbrainmask -help"
  echo ""
  echo "Required Arguments:";
  echo "   -i invol"
  echo "   -o outvol "
  echo "   -reg reg.dat"
  echo ""
  echo "Optional Arguments:";
  echo "   -zero-edges : set volume edge voxels to 0"
  echo "   -zero-slice-edges : set slice edge voxels to 0"
  echo "   -ndil n : number of dilations to expand the mask"
  echo "   -nerode n : number of erosions to contract the mask"
  echo "   -anatmask : use brainmask.mgz instead of aparc+aseg.mgz"
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

Creates a mask of the brain in the input volume space based on the FS
anatomically defined segmentation of brain structures (aparc+aseg.mgz)
which is mapped to the input space through the registration. After
mapping, the mask is dilated by 1. If -anatmask is used, then
brainmask.mgz is used instead of aparc+aseg.mgz and no dilation is
used. If -ndil is set, then it overrides the default number. If the
mask is eroded with -nerode, then the erosion is done after
dilations. This function is meant to replace mkbrainmask.fsl, which
uses the FSL bet program, which does not use the anatomical analysis.

