#! /bin/tcsh -f

#
# isxavg-re
#
# Original Author: Doug Greve
# CVS Revision Info:
#    $Author: zkaufman $
#    $Date: 2015/12/10 22:51:30 $
#    $Revision: 1.5 $
#
# Copyright (C) 2002-2007,
# The General Hospital Corporation (Boston, MA). 
# All rights reserved.
#
# Distribution, usage and copying of this software is covered under the
# terms found in the License Agreement file named 'COPYING' found in the
# FreeSurfer source code root directory, and duplicated here:
# https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
#
# General inquiries: freesurfer@nmr.mgh.harvard.edu
# Bug reports: analysis-bugs@nmr.mgh.harvard.edu
#


set inputargs = ($argv);
set fmrianalver = `cat $FMRI_ANALYSIS_DIR/docs/version`;
set VERSION = '$Id: isxavg-re,v 1.5 2015/12/10 22:51:30 zkaufman Exp $'

# Set Default Values #
set firstslice = 0;
set nslices = ();
set instems = ();
set sigstem = ();
set minsigstem = ();
set iminsigstem = ();
set avgstem = ();
set stdstem = ();
set tstem = ();
set StatFormatString = 'log10';
set monly = 0;
set jackknife   = 1;
set cmtxfile = ();
set QuitOnError = 1;
set mfile = isxavg_re_$$.m
set synth = 0;
set pctsigch = 0; 

# these are not used #
set inweights = ();
set showfpr = 0;
set voltype = ();
set invert = 0;

## If there are no arguments, just print useage and exit ##
if ( $#argv == 0  ) then
  goto usage_exit;
endif

### Look for -version flag ##
set n = `echo $argv | grep version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:

set MATLAB = `getmatlab`;
if($status) exit 1;

if($#nslices == 0) then
  set nslices = `getnslices $instems[1] $firstslice`;
  if($status) then
    echo "ERROR: nslices of $instems[1]"
    exit 1;
  endif
endif

goto check_args;
check_args_return:

## Create necessary output directories ##
foreach outstem ($sigstem $minsigstem $iminsigstem $tstem $avgstem $stdstem)
  set OutDir = `dirname $outstem`;
  mkdir -p $OutDir
  if( ! -e $OutDir ) then
    echo "ERROR: could not create $OutDir"
    exit 1;
  endif
end

## Set path for matlab file ##
if( $monly ) then
  set MLF = $mfile  
else
  set MLF = /tmp/$mfile
endif

set LF = $OutDir/isxavg-re.log
rm -f $LF

echo "isxavg-re matlab file is $MLF" | tee -a $LF
rm -f $MLF;

echo "%%% ----------------- %%"       >> $MLF;
echo "% matlab file to run isavgstg"    >> $MLF;
echo "% This is a temporary file and may be deleted" >> $MLF;
echo "% $MLF"                          >> $MLF;
echo "global QuitOnError;"             >> $MLF;
echo "QuitOnError = $QuitOnError;"     >> $MLF;
set c = "";
echo "fast_isxavg_re(..."     >> $MLF;
foreach arg ($inputargs)
  echo -n "$c '$arg' "      >> $MLF;
  set c = ",...\n";
end
echo -n ");" >> $MLF;
echo "" >> $MLF;
echo "if(QuitOnError) quit; end" >> $MLF;
echo "" >> $MLF;

echo "----------- Matlab file --------------" | tee -a $LF
cat $MLF | tee -a $LF
echo " " | tee -a $LF
echo "-----------------------------------" | tee -a $LF

if(! $monly ) then
  echo "------------------------------------------" | tee -a $LF
  echo "------- matlab output --------------------" | tee -a $LF
  cat $MLF | $MATLAB -display iconic 
  rm $MLF

  set bhdr0 = $instems[1].bhdr
  if(-e $bhdr0) then
    if($#tstem)       cp $bhdr0 $tstem.bhdr
    if($#sigstem)     cp $bhdr0 $sigstem.bhdr
    if($#minsigstem)  cp $bhdr0 $minsigstem.bhdr
    if($#iminsigstem) cp $bhdr0 $iminsigstem.bhdr
    if($#avgstem)     cp $bhdr0 $avgstem.bhdr
    if($#stdstem)     cp $bhdr0 $stdstem.bhdr
  endif

endif

echo " " | tee -a $LF
echo " " | tee -a $LF
date | tee -a $LF
echo "isxavg-re: finished" | tee -a $LF

exit 0;



############--------------##################
parse_args:

set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "-i":
      if( $#argv == 0) goto arg1err;
      set instems = ($instems $argv[1]); shift;
      breaksw

    case "-w":
      if( $#argv == 0) goto arg1err;
      set inweights = ($inweights $argv[1]); shift;
      breaksw

    case "-cmtx":
      if( $#argv == 0) goto arg1err;
      set cmtxfile = ($argv[1]); shift;
      if(! -e $cmtxfile.mat) then
        if(! -e $cmtxfile) then
          echo "ERROR: cannot find $cmtxfile or $cmtxfile.mat"
          exit 1;
        endif
      endif
      breaksw

    case "-trunc":
      if( $#argv == 0) goto arg1err;
      set truncsign = $argv[1]; shift;
      breaksw

    case "-t":
      if( $#argv == 0) goto arg1err;
      set tstem = $argv[1]; shift;
      breaksw

    case "-sig":
      if( $#argv == 0) goto arg1err;
      set sigstem = $argv[1]; shift;
      breaksw

    case "-minsig":
      if( $#argv == 0) goto arg1err;
      set minsigstem = $argv[1]; shift;
      breaksw

    case "-iminsig":
      if( $#argv == 0) goto arg1err;
      set iminsigstem = $argv[1]; shift;
      breaksw

    case "-avg":
      if( $#argv == 0) goto arg1err;
      set avgstem = $argv[1]; shift;
      breaksw

    case "-std":
      if( $#argv == 0) goto arg1err;
      set stdstem = $argv[1]; shift;
      breaksw

    case "-firstslice":
    case "-fs":
      if( $#argv == 0) goto arg1err;
      set firstslice = $argv[1]; shift;
      breaksw

    case "-nslices":
    case "-ns":
      if( $#argv == 0) goto arg1err;
      set nslices = $argv[1]; shift;
      breaksw

    case "-format":
      if( $#argv == 0) goto arg1err;
      set StatFormatString = $argv[1]; shift;
      switch($StatFormatString)
        case "ln":    
        case "log10": 
        case "raw":      
          breaksw
        default:
          echo "ERROR: output format $format unkown."
          echo "       use either ln, log10, or raw"
          exit 1
          breaksw
      endsw
      breaksw

    case "-monly":
      if( $#argv == 0) goto arg1err;
      set monly = 1; 
      set mfile = $argv[1]; shift;
      set QuitOnError = 0;
      breaksw

    case "-voltype":
      if( $#argv == 0) goto arg1err;
      set voltype = $argv[1]; shift;
      breaksw

    case "-jackknife":
      set jackknife = 1; 
      breaksw

    case "-nojackknife":
      set jackknife = 0; 
      breaksw

    case "-pctsigch":
      set pctsigch = 1; 
      breaksw

    case "-invert":
      set invert = 1; 
      breaksw

    case "-synth":
      set synth = 1; 
      breaksw

    case "-showfpr":
      set showfpr = 1; 
      breaksw

    case "-debug":
      set verbose = 1; 
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized.
      echo $cmdline
      exit 1
      breaksw
  endsw

end
goto parse_args_return;
############--------------##################

############--------------##################
check_args:
  if($#instems < 2) then
    echo "ERROR: at least two instems are required";
    exit 1;
  endif

  if($#tstem == 0 && sigstem == 0 && minsigstem == 0 && \
     iminsigstem == 0 && avgstem == 0) then
    echo "ERROR: no output stem specified"
    exit 1;
  endif

goto check_args_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo "USAGE:";
  echo "  isxavg-re "
  echo "   -cmtx cmtxfile - contrast matrix file generated by mkcontrast"
  echo "   -i instem1   - prefix of .bfloat selxavg volume 1";
  echo "   -i instem2   - prefix of .bfloat selxavg volume 2 ...";
  echo "   -trunc sign - pos, neg: truncate contrasted input (neg = zero neg vals)"
  echo "   -t       tstem        - prefix of t-statistic  output volume"
  echo "   -sig     sigstem      - prefix of significance output volume"
  echo "   -minsig  minsigstem   - prefix of minimum significance output volume"
  echo "   -iminsig iminsigstem  - prefix of minimum index  output volume"
  echo "   -avg     avgstem      - prefix of avg  output volume"
  echo "   -std     stdstem      - prefix of std  output volume"
  echo "   -firstslice <int>     : first slice to process <0>";
  echo "   -nslices <int>        : number of slices to process <auto>";
  echo "   -nojackknife          : turn off jackknifing <on> "
  echo "   -monly  mfile         : dont run, just create a matlab file"
  echo "   -version              : print version and exit"
  echo ""
  echo "  $VERSION"
  echo "  FAST Version $fmrianalver";
  echo "  Comments or questions: analysis-bugs@nmr.mgh.harvard.edu"
  echo ""
#  echo "   -voltype              : <auto>, selxavg, selavg, bvolume"
#  echo "   -format string        : <log10>, ln, raw"
#  echo "   -invert               : compute 1-p"
exit 1;
